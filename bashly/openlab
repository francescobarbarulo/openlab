#!/usr/bin/env bash
# This script was generated by bashly 1.2.6 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
openlab_usage() {
  printf "openlab - openlab CLI\n\n"

  printf "%s\n" "Usage:"
  printf "  openlab COMMAND\n"
  printf "  openlab [COMMAND] --help | -h\n"
  printf "  openlab --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   List existing lab infrastructures\n" "list  "
  printf "  %s   Get lab hostname\n" "get   "
  printf "  %s   Bootstrap lab infrastructure\n" "create"
  printf "  %s   Delete lab infrastructure\n" "delete"
  printf "  %s   Start lab instances\n" "start "
  printf "  %s   Stop lab instances\n" "stop  "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "ENV"
    printf "    Deploy environment\n"
    printf "    %s\n" "Allowed: dev, prod"
    printf "    %s\n" "Default: dev"
    echo

  fi
}

# :command.usage
openlab_list_usage() {
  printf "openlab list - List existing lab infrastructures\n\n"

  printf "%s\n" "Usage:"
  printf "  openlab list\n"
  printf "  openlab list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
openlab_get_usage() {
  printf "openlab get - Get lab hostname\n\n"

  printf "%s\n" "Usage:"
  printf "  openlab get NAME\n"
  printf "  openlab get --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Lab name\n"
    echo

  fi
}

# :command.usage
openlab_create_usage() {
  printf "openlab create - Bootstrap lab infrastructure\n\n"

  printf "%s\n" "Usage:"
  printf "  openlab create NAME\n"
  printf "  openlab create --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Lab name\n"
    echo

  fi
}

# :command.usage
openlab_delete_usage() {
  printf "openlab delete - Delete lab infrastructure\n\n"

  printf "%s\n" "Usage:"
  printf "  openlab delete NAME\n"
  printf "  openlab delete --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Lab name\n"
    echo

  fi
}

# :command.usage
openlab_start_usage() {
  printf "openlab start - Start lab instances\n\n"

  printf "%s\n" "Usage:"
  printf "  openlab start NAME\n"
  printf "  openlab start --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Lab name\n"
    echo

  fi
}

# :command.usage
openlab_stop_usage() {
  printf "openlab stop - Stop lab instances\n\n"

  printf "%s\n" "Usage:"
  printf "  openlab stop NAME\n"
  printf "  openlab stop --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Lab name\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions
# :command.function
openlab_list_command() {

  # src/list_command.sh
  for i in $(ls $PWD/terraform/terraform.tfstate.d)
  do

    LAB_NAME=$(echo ${i} | cut -d "-" -f 1)
    ENV=$(echo ${i} | cut -d "-" -f 2)
    echo "${LAB_NAME} (${ENV})"
  done

}

# :command.function
openlab_get_command() {

  # src/get_command.sh
  lab_name=${args[name]}
  WORKSPACE="${lab_name}-${ENV}"

  cd $PWD/terraform
  terraform workspace select ${WORKSPACE} &> /dev/null || (echo "Lab \"${lab_name}\" does not exist" && exit 1)
  echo "$(terraform output -raw hostname) ($(terraform output -raw state))"
  cd $PWD/..

}

# :command.function
openlab_create_command() {

  # src/create_command.sh
  lab_name=${args[name]}
  WORKSPACE="${lab_name}-${ENV}"

  cd $PWD/terraform
  terraform workspace select ${WORKSPACE} &> /dev/null || terraform workspace new ${WORKSPACE} &> /dev/null
  terraform apply -auto-approve -var="env=${ENV}"
  echo "guacamole_fqdn: $(terraform output hostname)" > $PWD/../ansible/vars.yaml
  cd $PWD/..
  mkdir -p $PWD/ansible/${lab_name}/${ENV}
  ansible-playbook $PWD/ansible/playbook.yaml --extra-vars "lab_name=${lab_name} env=${ENV}"
}

# :command.function
openlab_delete_command() {

  # src/delete_command.sh
  lab_name=${args[name]}
  WORKSPACE="${lab_name}-${ENV}"

  cd $PWD/terraform
  terraform workspace select ${WORKSPACE} &> /dev/null || (echo "Lab \"${lab_name}\" does not exist" && exit 1)
  terraform destroy -auto-approve -var="env=${ENV}"
  terraform workspace select default &> /dev/null && terraform workspace delete ${WORKSPACE} &> /dev/null
  cd $PWD/..
  rm -rf $PWD/ansible/${lab_name}/${ENV}
  if [ -z "$(ls -A $PWD/ansible/${lab_name})" ]; then rmdir $PWD/ansible/${lab_name}; fi
}

# :command.function
openlab_start_command() {

  # src/start_command.sh
  lab_name=${args[name]}
  WORKSPACE="${lab_name}-${ENV}"

  cd $PWD/terraform
  terraform workspace select ${WORKSPACE} &> /dev/null || (echo "Lab \"${lab_name}\" does not exist" && exit 1)
  terraform apply -auto-approve -var="env=${ENV}"
  cd $PWD/..

}

# :command.function
openlab_stop_command() {

  # src/stop_command.sh
  lab_name=${args[name]}
  WORKSPACE="${lab_name}-${ENV}"

  cd $PWD/terraform
  terraform workspace select ${WORKSPACE} &> /dev/null || (echo "Lab \"${lab_name}\" does not exist" && exit 1)
  terraform apply -auto-approve -var="instance_state=stopped" -var="env=${ENV}"
  cd $PWD/..

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        openlab_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export ENV="${ENV:-dev}"

  env_var_names+=("ENV")
  if [[ -n "${ENV:-}" ]] && [[ ! ${ENV:-} =~ ^(dev|prod)$ ]]; then
    printf "%s\n" "ENV environment variable must be one of: dev, prod" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    list)
      action="list"
      shift
      openlab_list_parse_requirements "$@"
      shift $#
      ;;

    get)
      action="get"
      shift
      openlab_get_parse_requirements "$@"
      shift $#
      ;;

    create)
      action="create"
      shift
      openlab_create_parse_requirements "$@"
      shift $#
      ;;

    delete)
      action="delete"
      shift
      openlab_delete_parse_requirements "$@"
      shift $#
      ;;

    start)
      action="start"
      shift
      openlab_start_parse_requirements "$@"
      shift $#
      ;;

    stop)
      action="stop"
      shift
      openlab_stop_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      openlab_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
openlab_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        openlab_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
openlab_get_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        openlab_get_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="get"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: openlab get NAME\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
openlab_create_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        openlab_create_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="create"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: openlab create NAME\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
openlab_delete_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        openlab_delete_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="delete"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: openlab delete NAME\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
openlab_start_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        openlab_start_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="start"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: openlab start NAME\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
openlab_stop_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        openlab_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stop"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: openlab stop NAME\n" >&2

    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export ENV="${ENV:-dev}"

}

# :command.run
run() {
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a other_args=()
  declare -g -a env_var_names=()
  declare -g -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "list") openlab_list_command ;;
    "get") openlab_get_command ;;
    "create") openlab_create_command ;;
    "delete") openlab_delete_command ;;
    "start") openlab_start_command ;;
    "stop") openlab_stop_command ;;
  esac
}

initialize
run "$@"
